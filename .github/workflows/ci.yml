name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast checks that fail quickly
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check workspace
      run: cargo check --workspace --all-features

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check formatting
      run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run Clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          # Test on nightly for advanced features
          - os: ubuntu-latest
            rust: nightly
            features: --all-features

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    # Install Python for ONNX fixture generation
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Python dependencies
      run: pip install onnx numpy

    - name: Generate ONNX test fixtures
      run: python crates/ronn-api/tests/fixtures/create_fixtures.py

    - name: Build workspace
      run: cargo build --workspace ${{ matrix.features }}

    - name: Run unit and integration tests
      run: cargo test --workspace ${{ matrix.features }}

    - name: Run doc tests
      run: cargo test --doc --workspace ${{ matrix.features }}

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: pip install onnx numpy

    - name: Generate ONNX test fixtures
      run: python crates/ronn-api/tests/fixtures/create_fixtures.py

    - name: Generate coverage
      run: cargo llvm-cov --workspace --lcov --output-path lcov.info

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      continue-on-error: true
      with:
        files: lcov.info

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run benchmarks
      run: cargo bench --workspace --no-fail-fast || echo "Some benchmarks failed but continuing"
      continue-on-error: true

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: success()
      continue-on-error: true
      with:
        tool: 'cargo'
        output-file-path: target/criterion/*/base/benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run security audit
      uses: EmbarkStudios/cargo-deny-action@v1
      continue-on-error: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --workspace --no-deps

    - name: Deploy documentation
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc